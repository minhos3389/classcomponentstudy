{"ast":null,"code":"var _jsxFileName = \"/Users/minhoseong/study/class-component-study/src/components/Users.js\";\n// import { useState } from 'react';\nimport React, { Component } from 'react';\nimport User from './User';\nimport classes from './Users.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_USERS = [{\n  id: 'u1',\n  name: 'Max'\n}, {\n  id: 'u2',\n  name: 'Manuel'\n}, {\n  id: 'u3',\n  name: 'Julie'\n}];\n\nclass Users extends Component {\n  // render() method안에 function을 추가하지 않습니다.\n  // 기술적으로는 가능하지만 , 제대로 작동하지 않을 수 있습니다.\n  // 대신 클래스형 컴포넌트에서는 함수 내용을 그룹으로 묶을 수 있습니다.(클래스 안에 그룹으로 묶어줌)\n  // toggleUsersHandler()라는 메서드를 추가해줍니다. 이게 가장 기본적인 형태입니다.\n  // 그리고 state를 제어하는 방식은 클래스형 컴포넌트만 사용했던 과거와 다릅니다. 16.8에서 hooks가 등장하면서 state를 hooks로 다루면서 간단해졌습니다.\n  // 리액트 16.8 이전버전에서는 클래스형 컴포넌트가 상태를 관리하는 유일무이 컴포넌트였습니다.\n  // 기본적으로 2개가 필요합니다. state를 초기화하고 선언하는 작업, 그리고 업데이트가 필요할때, toggleUsersHandler()와 동일한 형식으로 값을 업데이트.\n  // sate와 클래스형 컴포넌트를 선언할 때 , constructor()를 사용하게 됩니다.\n  // constructor()는 해당 구문이 작성될 때, 자동으로 호출됩니다. 해당 클래스가 컴포넌트로 사용될 때도 마찬가지입니다.\n  // consturctor()에서 초기화할 수 있는데, state초기화와 같습니다.\n  // 클래스형 컴포넌트에서 state는 무.조.건 객체!라는 점을 항상 기억합니다. always object\n  // 함수형 컴포넌트에서는 어떤 형태든지 상관없습니다. Boolean, String, number 도 넣을 수 있고, object도 가능합니다. flexible합니다.\n  constructor() {\n    super();\n    this.state = {\n      showUsers: true,\n      moreState: 'Test'\n    };\n  }\n\n  toggleUserHandler() {\n    this.setState(curState => {\n      return {\n        showUsers: !curState.showUsers\n      };\n    });\n  }\n\n  render() {\n    const usersList = /*#__PURE__*/_jsxDEV(\"ul\", {\n      children: DUMMY_USERS.map(user => /*#__PURE__*/_jsxDEV(User, {\n        name: user.name\n      }, user.id, false, {\n        fileName: _jsxFileName,\n        lineNumber: 45,\n        columnNumber: 11\n      }, this))\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this);\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.users,\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.toggleUserHandler,\n        children: [this.state.showUsers ? 'Hide' : 'Show', \" Users\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 5\n      }, this), this.state.showUsers && usersList]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 4\n    }, this);\n  }\n\n} // const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n//   const usersList = (\n//     <ul>\n//       {DUMMY_USERS.map((user) => (\n//         <User key={user.id} name={user.name} />\n//       ))}\n//     </ul>\n//   );\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? 'Hide' : 'Show'} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\n\nexport default Users;","map":{"version":3,"sources":["/Users/minhoseong/study/class-component-study/src/components/Users.js"],"names":["React","Component","User","classes","DUMMY_USERS","id","name","Users","constructor","state","showUsers","moreState","toggleUserHandler","setState","curState","render","usersList","map","user","users"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,MAAMC,WAAW,GAAG,CAClB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CADkB,EAElB;AAAED,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAFkB,EAGlB;AAAED,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAHkB,CAApB;;AAMA,MAAMC,KAAN,SAAoBN,SAApB,CAA8B;AAC5B;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAO,EAAAA,WAAW,GAAG;AACZ;AACA,SAAKC,KAAL,GAAa;AACXC,MAAAA,SAAS,EAAE,IADA;AAEXC,MAAAA,SAAS,EAAE;AAFA,KAAb;AAID;;AAGDC,EAAAA,iBAAiB,GAAG;AAClB,SAAKC,QAAL,CAAeC,QAAD,IAAc;AAC1B,aAAO;AAAEJ,QAAAA,SAAS,EAAE,CAACI,QAAQ,CAACJ;AAAvB,OAAP;AACD,KAFD;AAGD;;AAEDK,EAAAA,MAAM,GAAG;AACP,UAAMC,SAAS,gBACb;AAAA,gBACGZ,WAAW,CAACa,GAAZ,CAAiBC,IAAD,iBACf,QAAC,IAAD;AAAoB,QAAA,IAAI,EAAEA,IAAI,CAACZ;AAA/B,SAAWY,IAAI,CAACb,EAAhB;AAAA;AAAA;AAAA;AAAA,cADD;AADH;AAAA;AAAA;AAAA;AAAA,YADF;;AAQA,wBACD;AAAK,MAAA,SAAS,EAAEF,OAAO,CAACgB,KAAxB;AAAA,8BACC;AAAQ,QAAA,OAAO,EAAE,KAAKP,iBAAtB;AAAA,mBACE,KAAKH,KAAL,CAAWC,SAAX,GAAuB,MAAvB,GAAgC,MADlC;AAAA;AAAA;AAAA;AAAA;AAAA,cADD,EAIE,KAAKD,KAAL,CAAWC,SAAX,IAAwBM,SAJ1B;AAAA;AAAA;AAAA;AAAA;AAAA,YADC;AAQD;;AA7C2B,C,CA+C9B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeT,KAAf","sourcesContent":["// import { useState } from 'react';\nimport React, { Component } from 'react';\nimport User from './User';\n\nimport classes from './Users.module.css';\n\nconst DUMMY_USERS = [\n  { id: 'u1', name: 'Max' },\n  { id: 'u2', name: 'Manuel' },\n  { id: 'u3', name: 'Julie' },\n];\n\nclass Users extends Component {\n  // render() method안에 function을 추가하지 않습니다.\n  // 기술적으로는 가능하지만 , 제대로 작동하지 않을 수 있습니다.\n  // 대신 클래스형 컴포넌트에서는 함수 내용을 그룹으로 묶을 수 있습니다.(클래스 안에 그룹으로 묶어줌)\n  // toggleUsersHandler()라는 메서드를 추가해줍니다. 이게 가장 기본적인 형태입니다.\n  // 그리고 state를 제어하는 방식은 클래스형 컴포넌트만 사용했던 과거와 다릅니다. 16.8에서 hooks가 등장하면서 state를 hooks로 다루면서 간단해졌습니다.\n  // 리액트 16.8 이전버전에서는 클래스형 컴포넌트가 상태를 관리하는 유일무이 컴포넌트였습니다.\n  // 기본적으로 2개가 필요합니다. state를 초기화하고 선언하는 작업, 그리고 업데이트가 필요할때, toggleUsersHandler()와 동일한 형식으로 값을 업데이트.\n  // sate와 클래스형 컴포넌트를 선언할 때 , constructor()를 사용하게 됩니다.\n  // constructor()는 해당 구문이 작성될 때, 자동으로 호출됩니다. 해당 클래스가 컴포넌트로 사용될 때도 마찬가지입니다.\n  // consturctor()에서 초기화할 수 있는데, state초기화와 같습니다.\n  // 클래스형 컴포넌트에서 state는 무.조.건 객체!라는 점을 항상 기억합니다. always object\n  // 함수형 컴포넌트에서는 어떤 형태든지 상관없습니다. Boolean, String, number 도 넣을 수 있고, object도 가능합니다. flexible합니다.\n  constructor() {\n    super();\n    this.state = {\n      showUsers: true,\n      moreState: 'Test',\n    };\n  }\n\n\n  toggleUserHandler() {\n    this.setState((curState) => {\n      return { showUsers: !curState.showUsers };\n    });\n  }\n\n  render() {\n    const usersList = (\n      <ul>\n        {DUMMY_USERS.map((user) => (\n          <User key={user.id} name={user.name} />\n        ))}\n      </ul>\n    );\n\n    return (\n\t\t\t<div className={classes.users}>\n\t\t\t\t<button onClick={this.toggleUserHandler}>\n\t\t\t\t\t{this.state.showUsers ? 'Hide' : 'Show'} Users\n\t\t\t\t</button>\n\t\t\t\t{this.state.showUsers && usersList}\n\t\t\t</div>\n    )\n  }\n}\n// const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n\n//   const usersList = (\n//     <ul>\n//       {DUMMY_USERS.map((user) => (\n//         <User key={user.id} name={user.name} />\n//       ))}\n//     </ul>\n//   );\n\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? 'Hide' : 'Show'} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}