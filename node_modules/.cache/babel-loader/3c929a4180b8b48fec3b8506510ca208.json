{"ast":null,"code":"var _jsxFileName = \"/Users/minhoseong/study/class-component-study/src/components/Users.js\";\n// import { useState } from 'react';\nimport React, { Component } from 'react';\nimport User from './User';\nimport classes from './Users.module.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst DUMMY_USERS = [{\n  id: 'u1',\n  name: 'Max'\n}, {\n  id: 'u2',\n  name: 'Manuel'\n}, {\n  id: 'u3',\n  name: 'Julie'\n}];\n\nclass Users extends Component {\n  // render() method안에 function을 추가하지 않습니다.\n  // 기술적으로는 가능하지만 , 제대로 작동하지 않을 수 있습니다.\n  // 대신 클래스형 컴포넌트에서는 함수 내용을 그룹으로 묶을 수 있습니다.(클래스 안에 그룹으로 묶어줌)\n  // toggleUsersHandler()라는 메서드를 추가해줍니다. 이게 가장 기본적인 형태입니다.\n  // 그리고 state를 제어하는 방식은 클래스형 컴포넌트만 사용했던 과거와 다릅니다. 16.8에서 hooks가 등장하면서 state를 hooks로 다루면서 간단해졌습니다.\n  // 리액트 16.8 이전버전에서는 클래스형 컴포넌트가 상태를 관리하는 유일무이 컴포넌트였습니다.\n  // 기본적으로 2개가 필요합니다. state를 초기화하고 선언하는 작업, 그리고 업데이트가 필요할때, toggleUsersHandler()와 동일한 형식으로 값을 변경.\n  toggleUsersHandler() {}\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 27,\n      columnNumber: 7\n    }, this);\n  }\n\n} // const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n//   const usersList = (\n//     <ul>\n//       {DUMMY_USERS.map((user) => (\n//         <User key={user.id} name={user.name} />\n//       ))}\n//     </ul>\n//   );\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? 'Hide' : 'Show'} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\n\nexport default Users;","map":{"version":3,"sources":["/Users/minhoseong/study/class-component-study/src/components/Users.js"],"names":["React","Component","User","classes","DUMMY_USERS","id","name","Users","toggleUsersHandler","render"],"mappings":";AAAA;AACA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,IAAP,MAAiB,QAAjB;AAEA,OAAOC,OAAP,MAAoB,oBAApB;;AAEA,MAAMC,WAAW,GAAG,CAClB;AAAEC,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CADkB,EAElB;AAAED,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAFkB,EAGlB;AAAED,EAAAA,EAAE,EAAE,IAAN;AAAYC,EAAAA,IAAI,EAAE;AAAlB,CAHkB,CAApB;;AAMA,MAAMC,KAAN,SAAoBN,SAApB,CAA6B;AAC3B;AACA;AACA;AACA;AACA;AACA;AACA;AACAO,EAAAA,kBAAkB,GAAG,CAEpB;;AAEDC,EAAAA,MAAM,GAAG;AACP,wBACE;AAAA;AAAA;AAAA;AAAA,YADF;AAKD;;AAlB0B,C,CAoB7B;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAEA,eAAeF,KAAf","sourcesContent":["// import { useState } from 'react';\nimport React, { Component } from 'react';\nimport User from './User';\n\nimport classes from './Users.module.css';\n\nconst DUMMY_USERS = [\n  { id: 'u1', name: 'Max' },\n  { id: 'u2', name: 'Manuel' },\n  { id: 'u3', name: 'Julie' },\n];\n\nclass Users extends Component{\n  // render() method안에 function을 추가하지 않습니다.\n  // 기술적으로는 가능하지만 , 제대로 작동하지 않을 수 있습니다.\n  // 대신 클래스형 컴포넌트에서는 함수 내용을 그룹으로 묶을 수 있습니다.(클래스 안에 그룹으로 묶어줌)\n  // toggleUsersHandler()라는 메서드를 추가해줍니다. 이게 가장 기본적인 형태입니다.\n  // 그리고 state를 제어하는 방식은 클래스형 컴포넌트만 사용했던 과거와 다릅니다. 16.8에서 hooks가 등장하면서 state를 hooks로 다루면서 간단해졌습니다.\n  // 리액트 16.8 이전버전에서는 클래스형 컴포넌트가 상태를 관리하는 유일무이 컴포넌트였습니다.\n  // 기본적으로 2개가 필요합니다. state를 초기화하고 선언하는 작업, 그리고 업데이트가 필요할때, toggleUsersHandler()와 동일한 형식으로 값을 변경.\n  toggleUsersHandler() {\n\n  }\n\n  render() {\n    return (\n      <div>\n\n      </div>\n    )\n  }\n}\n// const Users = () => {\n//   const [showUsers, setShowUsers] = useState(true);\n\n//   const toggleUsersHandler = () => {\n//     setShowUsers((curState) => !curState);\n//   };\n\n//   const usersList = (\n//     <ul>\n//       {DUMMY_USERS.map((user) => (\n//         <User key={user.id} name={user.name} />\n//       ))}\n//     </ul>\n//   );\n\n//   return (\n//     <div className={classes.users}>\n//       <button onClick={toggleUsersHandler}>\n//         {showUsers ? 'Hide' : 'Show'} Users\n//       </button>\n//       {showUsers && usersList}\n//     </div>\n//   );\n// };\n\nexport default Users;\n"]},"metadata":{},"sourceType":"module"}